#shader vertex
#version 400 core

layout (location = 0) in vec3 in_position;
layout (location = 1) in vec2 in_texCoords;
layout (location = 2) in vec3 in_normal;

out vec2 pass_texCoords;
out vec3 pass_surfaceNormal;
out vec3 pass_toLightVector[4];
out vec3 pass_toCameraVector;
out float pass_visibility;
out vec4 pass_shadowCoords;

uniform mat4 tfMat;
uniform mat4 projMat;
uniform mat4 viewMat;
uniform vec3 lightPosition[4];

uniform mat4 toShadowMapSpace;

const float density = 0.0035;
const float gradient = 5.0;
const float shadowDistance = 100.0;
const float transitionDistance = 10.0;

uniform vec4 plane;

void main(void){

	vec4 worldPosition = tfMat * vec4(in_position, 1.0);
	pass_shadowCoords = toShadowMapSpace * worldPosition;
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	vec4 positionRelativeToCam = viewMat * worldPosition;
	gl_Position = projMat * positionRelativeToCam;
	pass_texCoords = in_texCoords;
	
	pass_surfaceNormal = (tfMat * vec4(in_normal, 0.0)).xyz;
	for(int i = 0; i < 4; i++)
		pass_toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	
	pass_toCameraVector = (inverse(viewMat) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	pass_visibility = exp(-pow((distance*density), gradient));
	pass_visibility = clamp(pass_visibility, 0.0, 1.0);
	
	distance -= (shadowDistance - transitionDistance);
	distance /= transitionDistance;
	pass_shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}

#shader fragment
#version 400 core

in vec2 pass_texCoords;
in vec3 pass_surfaceNormal;
in vec3 pass_toLightVector[4];
in vec3 pass_toCameraVector;
in float pass_visibility;
in vec4 pass_shadowCoords;

layout (location = 0) out vec4 out_colour;
layout (location = 1) out vec4 out_brightColour;

uniform sampler2D bgTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform sampler2D shadowMap;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void){

	float mapSize = 2048.0;
	float texelSize = 1.0 / mapSize;
	float total = 0.0;
	
	for(int x = -pcfCount; x <= pcfCount; x++){
		for(int y = -pcfCount; y <= pcfCount; y++){
			float objectNearestLight = texture(shadowMap, pass_shadowCoords.xy + vec2(x, y) * texelSize).r;
			if(pass_shadowCoords.z > objectNearestLight)
				total += 1.0;

		}
	}

	total /= totalTexels;
	float lightFactor = 1.0 - (total * pass_shadowCoords.w);

	vec4 blendMapColour = texture(blendMap, pass_texCoords);
	
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_texCoords * 40.0;
	vec4 backgroundTextureColour = texture(bgTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;

	vec3 unitNormal = normalize(pass_surfaceNormal);
	vec3 unitVectorToCamera = normalize(pass_toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0; i < 4; i++) {
		vec3 unitLightVector = normalize(pass_toLightVector[i]);
		float distance = length(pass_toLightVector[i]);	
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
	}
	totalDiffuse = max(totalDiffuse * lightFactor, 0.4);

	out_colour =  vec4(totalDiffuse, 1.0) * totalColour + vec4(totalSpecular, 1.0);
	out_colour = mix(vec4(skyColour, 1.0), out_colour, pass_visibility);
	out_brightColour = vec4(0.0);
}