#shader vertex
#version 400 core

layout (location = 0) in vec3 in_position;
layout (location = 1) in vec2 in_texCoords;
layout (location = 2) in vec3 in_normal;

out vec2 pass_texCoords;
out vec3 pass_surfaceNormal;
out vec3 pass_toLightVec[4];
out vec3 pass_toCameraVec;
out float pass_visibility;
out vec4 pass_shadowCoords;

uniform mat4 tfMat;
uniform mat4 projMat;
uniform mat4 viewMat;
uniform vec3 lightPos[4];

uniform mat4 toShadowMapSpace;

uniform float useFakeLighting;

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.0035;
const float gradient = 5.0;

uniform vec4 plane;

void main(void) {
    vec4 worldPosition = tfMat * vec4(in_position, 1.0);
    pass_shadowCoords = toShadowMapSpace * worldPosition;

    gl_ClipDistance[0] = dot(worldPosition, plane);

    vec4 posRelCam = viewMat * worldPosition;
    gl_Position = projMat * posRelCam;
    pass_texCoords = (in_texCoords / numberOfRows) + offset;

    vec3 actualNormal = in_normal;
    if(useFakeLighting > 0.5)
        actualNormal = vec3(0.0, 1.0, 0.0);

    pass_surfaceNormal = (tfMat * vec4(actualNormal, 0.0)).xyz;
    for(int i = 0; i < 4; i++)
        pass_toLightVec[i] = lightPos[i] - worldPosition.xyz;

    pass_toCameraVec = (inverse(viewMat) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

    float distance = length(posRelCam.xyz);
    pass_visibility = exp(-pow((distance * density), gradient));
    pass_visibility = clamp(pass_visibility, 0.0, 1.0);
}

#shader fragment
#version 400 core

in vec2 pass_texCoords;
in vec3 pass_surfaceNormal;
in vec3 pass_toLightVec[4];
in vec3 pass_toCameraVec;
in float pass_visibility;
in vec4 pass_shadowCoords;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2D modelTexture;
uniform sampler2D specularMap;
uniform sampler2D shadowMap;
uniform float usesSpecularMap;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

	float objectNearestLight = texture(shadowMap, pass_shadowCoords.xy).r;
	float lightFactor = 1.0;
	if(pass_shadowCoords.z > objectNearestLight + 0.02){
		lightFactor = 1.0  - 0.4;
	}
	
	vec3 unitNormal = normalize(pass_surfaceNormal);
	vec3 unitVectorToCamera = normalize(pass_toCameraVec);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0;i<4;i++){
	
		vec3 unitLightVector = normalize(pass_toLightVec[i]);	
		float distance = length(pass_toLightVec[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
		
	//totalDiffuse = totalDiffuse * lightFactor;
	
	totalDiffuse = max(totalDiffuse, 0.4);
	vec4 textureColour = texture(modelTexture,pass_texCoords);
	if(textureColour.a<0.5){
		discard;
	}
	
	totalDiffuse = totalDiffuse * lightFactor;
	
	out_BrightColor = vec4(0.0);
	
	if(usesSpecularMap > 0.5){
		vec4 mapInfo = texture(specularMap, pass_texCoords);
		totalSpecular *= mapInfo.r;
		if(mapInfo.g > 0.5){
			out_BrightColor = textureColour + vec4(totalSpecular, 1.0);
			totalDiffuse = vec3(1.0);
		}
	}
	
	out_Color =  vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColour,1.0),out_Color, pass_visibility);
}