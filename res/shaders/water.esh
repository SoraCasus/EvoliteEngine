#shader vertex
#version 400 core

layout (location = 0) in vec2 in_position;

out vec4 pass_clipSpace;
out vec2 pass_texCoords;
out vec3 pass_toCameraVector;
out vec3 pass_fromLightVector;

uniform mat4 projMat;
uniform mat4 viewMat;
uniform mat4 modelMat;
uniform vec3 cameraPosition;
uniform vec3 lightPosition;

const float tiling = 32.0;

void main(void) {
	vec4 worldPosition = modelMat * vec4(in_position.x, 0.0, in_position.y, 1.0);
	pass_clipSpace = projMat * viewMat * worldPosition;
	gl_Position = pass_clipSpace;
 	pass_texCoords = vec2(in_position.x/2.0 + 0.5, in_position.y/2.0 + 0.5) * tiling;
 	pass_toCameraVector = cameraPosition - worldPosition.xyz;
 	pass_fromLightVector = worldPosition.xyz - lightPosition;
}

#shader fragment
#version 400 core

in vec4 pass_clipSpace;
in vec2 pass_texCoords;
in vec3 pass_toCameraVector;
in vec3 pass_fromLightVector;

layout (location = 0) out vec4 out_colour;
layout (location = 1) out vec4 out_brightColour;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;

uniform float moveFactor;

const float waveStrength = 0.04;
const float shineDamper = 20.0;
const float reflectivity = 0.5;

void main(void) {
	
	vec2 ndc = (pass_clipSpace.xy/pass_clipSpace.w)/2.0 + 0.5;
	vec2 refractionTexCoords = vec2(ndc.x,ndc.y);
	vec2 reflectionTexCoords = vec2(ndc.x,-ndc.y);
	
	float near = 0.1;
	float far = 1000.0;
	float depth = texture(depthMap, refractionTexCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float waterDepth = floorDistance - waterDistance;
		
	vec2 distortedTexCoords = texture(dudvMap, vec2(pass_texCoords.x + moveFactor, pass_texCoords.y)).rg * 0.1;
	distortedTexCoords = pass_texCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth / 20.0, 0.0, 1.0);
	
	refractionTexCoords += totalDistortion;
	refractionTexCoords = clamp(refractionTexCoords, 0.001, 0.999);
	
	reflectionTexCoords += totalDistortion;
	reflectionTexCoords.x = clamp(reflectionTexCoords.x, 0.001, 0.999);
	reflectionTexCoords.y = clamp(reflectionTexCoords.y, -0.999, -0.001);
		
	vec4 reflectColour = texture(reflectionTexture, reflectionTexCoords);
	vec4 refractColour = texture(refractionTexture, refractionTexCoords);
	
	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2 -1, normalMapColour.b * 3.0, normalMapColour.g * 2 - 1);
	normal = normalize(normal);
	
	vec3 viewVector = normalize(pass_toCameraVector);
	float refractiveFactor = dot(viewVector, normal);
	refractiveFactor = pow(refractiveFactor, 0.5f);
	refractiveFactor = clamp(refractiveFactor, 0.0, 1.0);
	
	
	vec3 reflectedLight = reflect(normalize(pass_fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth / 5.0, 0.0, 1.0);
	
	out_colour = mix(reflectColour, refractColour, refractiveFactor);
	out_colour = mix(out_colour, vec4(0.0, 0.1, 0.1, 1.0), 0.1) + vec4(specularHighlights, 0.0);
	out_colour.a = clamp(waterDepth / 5.0, 0.0, 1.0);
	out_brightColour = vec4(0.0);
	
}
